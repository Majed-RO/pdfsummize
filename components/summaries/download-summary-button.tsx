'use client';
import { Button } from '@/components/ui/button';
import { SITE_NAME } from '@/lib/constants';
import { Download } from 'lucide-react';

export function DownloadSummaryButton({
	title,
	summaryText,
	fileName,
	createdAt
}: {
	title: string;
	summaryText: string;
	fileName: string;
	createdAt: string;
}) {
	/* 
  Based on the code, this is a JavaScript function called handleDownload that creates and downloads a text file containing a summary.

How It Works
summaryContent Variable: This section uses a template literal to build the content of the text file. It includes the title, a "Generated Summary" heading, the creation date, the main summary text, the original file name, and a "Generated by Sommaire" line.

Creating a Blob: The summaryContent is converted into a Blob object. A Blob (Binary Large Object) represents raw data, in this case, a plain text file.

Creating a URL: The code then uses URL.createObjectURL(blob) to create a temporary URL that points to the data in the Blob. This makes it possible for the browser to "download" the data as if it were a file on a server.

Creating a Download Link:

document.createElement('a') creates a temporary <a> (anchor) HTML element in memory.

link.href = url sets the link's destination to the temporary URL created from the Blob.

link.download = ... is a crucial part. The download attribute tells the browser to download the linked URL instead of navigating to it. The file name is created by replacing any non-alphanumeric characters in the title with underscores and appending .txt.

Triggering the Download:

link.click() simulates a click on the temporary link. This action prompts the browser to start the file download.

Cleanup:

document.body.removeChild(link) removes the temporary link element.

URL.revokeObjectURL(url) releases the temporary URL, freeing up the memory it was using. This is important for preventing memory leaks, especially if the download function is used frequently.

In short, the function dynamically generates a text file from a summary, names it based on the title, and then automatically triggers a download of that file for the user.
  
  */
	const handleDownload = () => {
		const summaryContent = `# ${title}
Generated Summary
Generated on: ${new Date(createdAt).toLocaleDateString()}

${summaryText}

Original File: ${fileName}
Generated by ${SITE_NAME}
`;

		const blob = new Blob([summaryContent], { type: 'text/plain' });
		const url = URL.createObjectURL(blob);

		const link = document.createElement('a');
		link.href = url;
		link.download = `Summary-${title.replace(
			/[^a-z0-9]/gi,
			'_'
		)}.txt`;
		// Add the link to the document body before clicking and removing it
		document.body.appendChild(link);
		link.click();

		document.body.removeChild(link);
		URL.revokeObjectURL(url);
	};

	return (
		<Button
			size="sm"
			className="h-8 px-3 bg-rose-100 text-rose-600
      hover:text-rose-700 hover:bg-rose-50"
			onClick={handleDownload}
		>
			<Download className="h-4 w-4 mr-1" />
			Download Summary
		</Button>
	);
}
